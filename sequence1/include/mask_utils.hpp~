
bool point_in_polygon(const vector<int>& poly_x,
		      const vector<int>& poly_y, int x, int y)
{
    int counter = 0;
    int i;
    double xinters;
    int N = (int)poly_x.size();
    //CLHPoint p1, p2;
    int p1x, p1y, p2x, p2y;

    p1x = poly_x(0);
    p1y = poly_y(0);

    for (i=1; i<=N; i++) 
    {
        p2x = poly_x[(i) % (N)];
	p2y = poly_y[(i) % (N)];

	if (y > std::min<int>(p1y, p2y)) 
        {
	    if (y <= std::max<int>(p1y, p2y)) 
            {
		if (x <= std::max<int>(p1x, p2x)) 
                {
                    if (p1y != p2y) 
                    {
                        xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x;
                        if (p1x == p2x || x <= xinters)
                            counter++;
                    }
                }
            }
        }
        p1x = p2x;
	p1y = p2y;
    }

    if (counter % 2 == 0)
        return false;
    else
        return true;
}

void mask_from_polygon(matrix<int>& mask, int s1, int s2, 
		       const vector<int>& poly_x,
		       const vector<int>& poly_y)
{
    mask = matrix<int>(s1, s2);

    int x, y, x0, y0, x1, y1;

    x0 = poly_x(0);
    x1 = poly_x(0);
    y0 = poly_y(0);
    y1 = poly_y(0);

    //for ( ++point_it; point_it != region_it->end(); ++point_it)
    for(int nn=1; nn<poly_x.size(); ++nn)
    {
	//if (point_it->x < x0)         x0 = point_it->x;
	if (poly_x(nn) < x0)         x0 = poly_x(nn);
	if (poly_x(nn) > x1)         x1 = poly_x(nn);

	if (poly_y(nn) < y0)         y0 = poly_y(nn);
	if (poly_y(nn) > y1)         y1 = poly_y(nn);
    }

    for (y = 0; y < s1; ++y)
    {
	for(x = 0; x < s2; ++x)
	{
	    if( (y < y0) || (y > y1) ||
		(x < x0) || (x > x1) ) 
	    {
		//LH_Pixel(nWidth, 1, mpMask, y, x) = 0;
		mask(y, x) = 0;
		continue;
	    }
	    if(point_in_polygon(poly_x, poly_y, x, y))
	    {
		mask(y, x) = 1;				
	    }
	    else
	    {
		mask(y, x) = 0;
		//LH_Pixel(nWidth, 1, mpMask, y, x) = 0;
	    }
	}		
    }

}



const int neighbor_dx[4]={1, 0, -1, 0};
const int neighbor_dy[4]={0, 1, 0, -1};

void dilate_mask(matrix<int>& mask)
{
    int s1 = mask.size1();
    int s2 = mask.size2();
    matrix<int> tmask=mask;//zero_matrix<int>(s1, s2);

    for(int yy=1; yy+1<s1; ++yy)
    {
	for(int xx=1; xx+1<s2; ++xx)
	{
	    if( mask(yy, xx) )	continue;
	    for(int nn=0; nn<4; ++nn)
	    {
		int dx = neighbor_dx[nn];
		int dy = neighbor_dy[nn];
		if(mask(yy+dy, xx+dx))
		{					
		    tmask(yy, xx) = 1;
		    break;
		}
	    }
	}
    }
    noalias(mask) = tmask;
}



void erode_mask(matrix<int>& mask)
{
    int s1 = mask.size1();
    int s2 = mask.size2();
    matrix<int> tmask=mask;//zero_matrix<int>(s1, s2);

    for(int yy=1; yy+1<s1; ++yy)
    {
	for(int xx=1; xx+1<s2; ++xx)
	{
	    if(! mask(yy, xx) )	continue;
	    int ok = 1;
	    for(int nn=0; nn<4; ++nn)
	    {
		int dx = neighbor_dx[nn];
		int dy = neighbor_dy[nn];
		if(!mask(yy+dy, xx+dx))
		{
		    ok = 0;
		    break;
		}
	    }
	    tmask(yy, xx) = ok;
			
	}
    }
    noalias(mask) = tmask;
}

