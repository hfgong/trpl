#include <iostream>
#include <algorithm>
#include <vector>
#include <numeric>
#include <limits>

#include <boost/filesystem.hpp>
#include <boost/format.hpp>

#include <boost/lambda/lambda.hpp>
#include <boost/lambda/casts.hpp>
#include <boost/lambda/bind.hpp>

#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/assignment.hpp>
#include <boost/numeric/ublas/lu.hpp>

#include <boost/numeric/bindings/traits/ublas_vector.hpp>
#include <boost/numeric/bindings/traits/ublas_sparse.hpp>
#include <boost/numeric/bindings/umfpack/umfpack.hpp>

#include <boost/numeric/ublas/io.hpp>

#include <CImg.h>

#include "statistics.hpp"
#include "cvpr_array_traits.hpp"
#include "real_timer.hpp"
#include "text_file.hpp"
#include "misc_utils.hpp"

namespace umf=boost::numeric::bindings::umfpack;
using namespace boost::numeric::ublas;
using namespace boost;
using namespace cvpr;
using namespace cimg_library;

namespace fs = boost::filesystem;


typedef cvpr::sparse_matrix_t<double>::type umf_sparse_matrix;


#include "lmdp_qlearn.hpp"

struct directory_structure_t
{
    directory_structure_t() {
	prefix = "../test/";
	output = "../test/output2/";
	workspace = "../test/workspace/";
	figures = "../test/figures/";
    }
    void make_dir(){
	if ( !fs::exists( prefix ) )
	{
	    fs::create_directory( prefix );
	}
	if ( !fs::exists( workspace ) )
	{
	    fs::create_directory( workspace );
	}
	if ( !fs::exists( output ) )
	{
	    fs::create_directory( output );
	}
    	if ( !fs::exists( figures ) )
	{
	    fs::create_directory( figures );
	}
    }


    std::string prefix;
    std::string output;
    std::string workspace;
    std::string figures;
};

struct training_data_t
{
    matrix<int> obs;
    matrix<int> dyn_obs;
    matrix<int> path;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version)	{
	ar & BOOST_SERIALIZATION_NVP(obs);
	ar & BOOST_SERIALIZATION_NVP(dyn_obs);
	ar & BOOST_SERIALIZATION_NVP(path);
    }

    void save(std::string const& fname)	const {
	save_xml(*this, fname, "training_data");
    }
    void load(std::string const& fname) {
	load_xml(*this, fname, "training_data");
    }
};

void draw_training_data(CImg<unsigned char>& vis,
			training_data_t const& tdata)
{

    typedef array3d_traits<CImg<unsigned char> > tr;
    tr::change_size(vis, 3, tdata.obs.size1(), tdata.obs.size2());
    for(int ii=0; ii<tdata.obs.size1(); ++ii)
    {
	for(int jj=0; jj<tdata.obs.size2(); ++jj)
	{
	    tr::ref(vis, 0, ii, jj) = 0;
	    tr::ref(vis, 1, ii, jj) = 0;
	    tr::ref(vis, 2, ii, jj) = 0;
	    if(tdata.obs(ii, jj)) tr::ref(vis, 2, ii, jj) = 255;
	    if(tdata.dyn_obs(ii, jj)) tr::ref(vis, 0, ii, jj) = 255;
	}
    }
    char ccol[3] = {255, 255, 255};

    for(int kk=0; kk+1<tdata.path.size2(); ++kk)
    {
	vis.draw_line(tdata.path(1, kk), tdata.path(0, kk),
		      tdata.path(1, kk+1), tdata.path(0, kk+1), ccol);
    }

}

void generate_feature_maps(matrix<int> const& obs, matrix<int> const& dyn_obs,
			   vector<matrix<float> >& feat)
{

    using namespace boost::lambda;
    feat = vector<matrix<float> >(3);
    feat(0) = scalar_matrix<float>(obs.size1(), obs.size2(), 1.0f);
    feat(1) = matrix<float>(obs.size1(), obs.size2());
    feat(2) = matrix<float>(obs.size1(), obs.size2());

    CImg<int> obs_im;
    array2d_copy(obs, obs_im);
    CImg<float> obs_dist = obs_im.get_distance(1);
    
    CImg<int> dyn_obs_im;
    array2d_copy(dyn_obs, dyn_obs_im);
    CImg<float> dyn_obs_dist = dyn_obs_im.get_distance(1);

    //array2d_print(std::cout, obs_dist);
    //array2d_print(std::cout, dyn_obs_dist);

    float(*fexp)(float) = std::exp;
    array2d_transform(obs_dist, feat(1), bind(fexp, -_1/4.0f));
    array2d_transform(dyn_obs_dist, feat(2), bind(fexp, -_1/4.0f));

}


struct nbrhood
{
    static int dy[8];
    static int dx[8];
};

int nbrhood::dy[8]={0, 1, 0, -1, 1, 1, -1, -1};
int nbrhood::dx[8]={1, 0, -1, 0, 1, -1, -1, 1};


void get_state_graph(matrix<int> const& obs, matrix<int> const& dyn_obs,
		     vector<vector<int> >& sg,
		     matrix<int>& yx2ig,
		     matrix<int>& ig2yx)
{
    using namespace boost::lambda;
    matrix<int> obs_all(obs+dyn_obs);
    int ng = std::count(obs_all.data().begin(), obs_all.data().end(), 0);
    sg = vector<vector<int> >(ng);

    yx2ig = scalar_matrix<int>(obs.size1(), obs.size2(), -1);
    ig2yx = scalar_matrix<int>(ng, 2, -1);

    int ig = 0;
    for(int yy=0; yy<obs.size1(); ++yy)
    {
	for(int xx=0; xx<obs.size2(); ++xx)
	{
	    if(obs_all(yy, xx)>0) continue;
	    yx2ig(yy, xx) = ig;
	    ig2yx(ig, 0) = yy;
	    ig2yx(ig, 1) = xx;
	    ++ig;
	}
    }

    vector<std::vector<int> > sgv(ng);
    for(int yy=0; yy<yx2ig.size1(); ++yy)
    {
	for(int xx=0; xx<yx2ig.size2(); ++xx)
	{
	    int ig1 = yx2ig(yy, xx);
	    if(ig1<0) continue;
	    for(int nn=0; nn<8; ++nn)
	    {
		int y2 = yy+nbrhood::dy[nn];
		int x2 = xx+nbrhood::dx[nn];
		if(y2<0 || y2>=obs.size1()) continue;
		if(x2<0 || x2>=obs.size2()) continue;
		int ig2 = yx2ig(y2, x2);
		if(ig2<0) continue;
		sgv(ig1).push_back(ig2);
	    }
	}
    }

    for(int ii=0; ii<sgv.size(); ++ii)
    {
	array1d_copy(sgv[ii], sg(ii));
    }

}

void get_feature_graph(matrix<int> const& obs, matrix<int> const& dyn_obs,
		       vector<matrix<float> > const& feat,
		       vector<vector<int> > const& sg,
		       matrix<int> const& ig2yx,
		       matrix<vector<double> >& fg)
{
    using namespace boost::lambda;

    int ng = sg.size();

    fg = matrix<vector<double> >(feat.size(), ng);
    for(int ff=0; ff<feat.size(); ++ff)
    {
	for(int gg=0; gg<ng; ++gg)
	{
	    fg(ff, gg) = vector<double>(sg(gg).size());
	}
    }

    for(int ff=0; ff<feat.size(); ++ff)
    {
	for(int gg=0; gg<ng; ++gg)
	{

	    int yy = ig2yx(gg, 0);
	    int xx = ig2yx(gg, 1);

	    for(int nn=0; nn<fg(ff, gg).size(); ++nn)
	    {
		int g2 = sg(gg)(nn);
		int y2 = ig2yx(g2, 0);
		int x2 = ig2yx(g2, 1);
		int dx = x2-xx;
		int dy = y2-yy;

		double dist = std::sqrt(static_cast<double>(dx*dx+dy*dy));
		fg(ff, gg)(nn) = (feat(ff)(yy, xx)+feat(ff)(y2, x2))/2*dist;
	    }

	}
    }

}


void get_path_ig(matrix<int> const& path,
		 matrix<int> const& yx2ig,
		 vector<int>& path_ig)
{
    path_ig = vector<int>(path.size2());
    for(int ii=0; ii<path.size2(); ++ii)
    {
	path_ig(ii) = yx2ig(path(0, ii), path(1, ii));
    }
}


// Robust computation of log sum_i exp(ml_i)
// It is useful for log-likelihood of mixture models
// robust computation with underflow prevention
template <class Float>
inline Float log_sum_exp(vector<Float> const& ml)
{
    Float maxml = *(std::max_element(ml.begin(), ml.end()));
    Float temp=0;
    for(int mm=0; mm<ml.size(); ++mm)    {
	Float v = ml(mm)-maxml;
	if(v<-12.0f)  continue; // exp(-12) is too small compare to 1.0
	temp += std::exp(v);
    }
    return maxml+std::log(temp);
}

void embed_lmdp(vector<matrix<float> > const& feat,
		matrix<vector<double> > const& fg,
		vector<vector<int> > const& sg,
		matrix<int> const& yx2ig,
		matrix<int> const& ig2yx,
		vector<double>& wei,
		vector<matrix<double> >& p_tilde,
		vector<matrix<double> >& log_p_tilde,
		vector<vector<double> >& l_tilde, 
		vector<vector<double> >& nent, 
		vector<vector<double> >& log_pps,
		vector<double>& q)
{
    using namespace boost::lambda;
    int ng = ig2yx.size1();//std::count_if(yx2ig.data().begin(), yx2ig.data().end(), _1>=0);
    double lambda = *(wei.rbegin());
    if(log_pps.size()==0)
    {
	q = scalar_vector<double>(ng, 0.0f);

	log_pps = vector<vector<double> >(ng);
	for(int ii=0; ii<ng; ++ii)
	{
	    log_pps(ii) = scalar_vector<double>(sg(ii).size(), 0);
	}
	p_tilde = vector<matrix<double> >(ng);
	log_p_tilde = vector<matrix<double> >(ng);
	for(int ii=0; ii<ng; ++ii)
	{
	    p_tilde(ii) = scalar_matrix<double>(sg(ii).size(), sg(ii).size(), 0);
	    log_p_tilde(ii) = scalar_matrix<double>(sg(ii).size(), sg(ii).size(), 0);
	}

	l_tilde = vector<vector<double> >(ng);
	nent = vector<vector<double> >(ng);
	for(int ii=0; ii<ng; ++ii)
	{
	    l_tilde(ii) = scalar_vector<double>(sg(ii).size(), 0);
	    nent(ii) = scalar_vector<double>(sg(ii).size(), 0);
	}
    }

    vector<vector<double> > fdist(ng);
    for(int gg=0; gg<ng; ++gg)
    {
	fdist(gg) = scalar_vector<double>(sg(gg).size(), 0);
	for(int nn=0; nn<sg(gg).size(); ++nn)
	{
	    for(int ff=0; ff<fg.size1(); ++ff)
	    {
		fdist(gg)(nn) += fg(ff, gg)(nn)*wei(ff);
	    }
	}
    }

    double (*fexp)(double) = std::exp;

    for(int ii=0; ii<ng; ++ii)
    {
	int nnb = sg(ii).size();

	for(int aa=0; aa<nnb; ++aa)
	{
	    int yy = ig2yx(sg(ii)(aa), 0);
	    int xx = ig2yx(sg(ii)(aa), 1);
	    vector<double> nldist(nnb);
	    for(int jj=0; jj<nnb; ++jj)
	    {
		int y2 = ig2yx(sg(ii)(jj), 0);
		int x2 = ig2yx(sg(ii)(jj), 1);
		double dist = (yy-y2)*(yy-y2)+(xx-x2)*(xx-x2);
		nldist(jj) = -lambda*dist;
	    }
	    double mv = *std::max_element(nldist.begin(), nldist.end());
	    std::for_each(nldist.begin(), nldist.end(), _1-=mv);
	    vector<double> prob(nnb);
	    std::transform(nldist.begin(), nldist.end(), prob.begin(), bind(fexp, _1));

	    double denom = std::accumulate(prob.begin(), prob.end(), 0.0f);
	    std::for_each(prob.begin(), prob.end(), _1/=denom);
	    std::for_each(nldist.begin(), nldist.end(), _1-=std::log(denom));
	    row(p_tilde(ii), aa) = prob;
	    row(log_p_tilde(ii), aa) = nldist;
	    l_tilde(ii)(aa) = std::inner_product(prob.begin(), prob.end(), fdist(ii).begin(), 0.0f);
	    nent(ii)(aa) = std::inner_product(prob.begin(), prob.end(), nldist.begin(), 0.0f);;
	}
	vector<double> nvec(l_tilde(ii)-nent(ii));
	matrix<double> B = p_tilde(ii); 
	permutation_matrix<std::size_t> P(nvec.size());
	//std::cout<<"B.size="<<B.size1()<<","<<B.size2()<<std::endl;
	//std::cout<<"nvec.size="<<nvec.size()<<std::endl;
	//std::cout<<"B="<<std::endl;
	//array2d_print(std::cout, B);


	int res = lu_factorize(B, P);  //B holds L and U
	lu_substitute(B, P, nvec);       //nvec holds the solution B_{-1}*nvec
	vector<double> m_bar = -nvec;

	q(ii) = -log_sum_exp(m_bar);
	vector<double> log_pps_row(m_bar.size());
	std::transform(m_bar.begin(), m_bar.end(), log_pps_row.begin(), _1+=q(ii));
	log_pps(ii) = log_pps_row;
    }

    //std::cout<<q<<std::endl;
}


void compute_grad_plh(matrix<vector<double> >const& fg,
		      vector<double> const& wei,
		      vector<vector<int> > const& sg,
		      vector<matrix<double> > const& p_tilde,
		      vector<matrix<double> > const& log_p_tilde,
		      matrix<int> const& ig2yx,
		      int ig,
		      vector<matrix<double> >& grad_log_p_tilde,
		      matrix<double> & grad_l_tilde,
		      matrix<double> & grad_nent)
{
    using namespace boost::lambda;
    int nf = fg.size1()+1; //+1 for lambda
    int nnb = sg(ig).size();

    grad_log_p_tilde = vector<matrix<double> >(nf);
    for(int ff=0; ff<nf; ++ff)
    {
	grad_log_p_tilde(ff) = scalar_matrix<double>(nnb, nnb, 0.0f);
    }
    for(int aa=0; aa<grad_log_p_tilde(nf-1).size1(); ++aa)
    {
	int iga = sg(ig)(aa);
	int ya = ig2yx(iga, 0);
	int xa = ig2yx(iga, 1);
	double denom = 0;
	for(int jj=0; jj<grad_log_p_tilde(nf-1).size2(); ++jj)
	{
	    int igj = sg(ig)(jj);
	    int yj = ig2yx(igj, 0);
	    int xj = ig2yx(igj, 1);
	    double ds = (xa-xj)*(xa-xj)+(ya-yj)*(ya-yj);
	    grad_log_p_tilde(nf-1)(aa, jj) = -ds;
	    denom += p_tilde(ig)(aa, jj)*ds;
	}
	for(int jj=0; jj<grad_log_p_tilde(nf-1).size2(); ++jj)
	{
	    grad_log_p_tilde(nf-1)(aa, jj) += denom;
	}
    }


    grad_l_tilde = scalar_matrix<double>(nf, nnb, 0.0f);
    for(int ff=0; ff+1<nf; ++ff)
    {
	for(int aa=0; aa<grad_l_tilde.size2(); ++aa)
	{
	    grad_l_tilde(ff, aa) = inner_prod(row(p_tilde(ig), aa), fg(ff, ig));
	}
    }

    vector<double> di=scalar_vector<double>(nnb, 0.0f);
    for(int ff=0; ff+1<nf; ++ff)
    {
	for(int nn=0; nn<nnb; ++nn)
	{
	    di(nn) += wei(ff)*fg(ff, ig)(nn);
	}
    }
    //std::cout<<di<<std::endl;
    grad_nent = scalar_matrix<double>(nf, nnb, 0.0f);
    for(int aa=0; aa<grad_l_tilde.size2(); ++aa)
    {
	vector<double> pgrad_logp = element_prod(row(p_tilde(ig), aa), row(grad_log_p_tilde(nf-1), aa));
	grad_l_tilde(nf-1, aa) = inner_prod(pgrad_logp, di);
	vector<double> logp_plus1= row(log_p_tilde(ig), aa);
	std::for_each(logp_plus1.begin(), logp_plus1.end(), _1+=1);
	grad_nent(nf-1, aa) = inner_prod(pgrad_logp, logp_plus1);
    }

    //array2d_print(std::cout, grad_nent);
}

void compute_grad_q_pps(matrix<double> const& p_tilde, 
			vector<matrix<double> > const& grad_log_p_tilde,
			vector<double> const& log_pps,
			matrix<double> const& grad_l_tilde,
			matrix<double> const& grad_nent,
			vector<double> & grad_q,
			matrix<double>& grad_log_pps)
{
    using namespace boost::lambda;
    int nf = grad_log_p_tilde.size();
    int nnb = grad_l_tilde.size2();
    grad_log_pps = matrix<double>(nf, nnb);
    grad_q = vector<double>(nf);

    matrix<double> B = p_tilde;
    permutation_matrix<std::size_t> P(nnb);
    int res = lu_factorize(B, P);  //B holds L and U

    vector<double> pps(log_pps.size());
    double (*fexp)(double) = std::exp;
    std::transform(log_pps.begin(), log_pps.end(), pps.begin(), fexp);
    for(int ff=0; ff<nf; ++ff)
    {
	matrix<double> plogp= element_prod(p_tilde, grad_log_p_tilde(ff));
	vector<double> nvec = prod(plogp, log_pps);
	nvec += row(grad_l_tilde, ff)-row(grad_nent, ff);

	lu_substitute(B, P, nvec);       //nvec holds the solution B_{-1}*nvec
	vector<double> m_bar = -nvec;

	grad_q(ff) = inner_prod(pps, nvec);

	std::for_each(m_bar.begin(), m_bar.end(), _1 += grad_q(ff));
	row(grad_log_pps, ff) = m_bar;
    }

}

void compute_hess_plh(matrix<vector<double> >const& fg,
		      vector<double> const& wei,
		      vector<vector<int> > const& sg,
		      vector<matrix<double> > const& p_tilde,
		      vector<matrix<double> > const& log_p_tilde,
		      matrix<int> const& ig2yx,
		      int ig,
		      vector<matrix<double> > const& grad_log_p_tilde,
		      matrix<double> const& grad_l_tilde,
		      matrix<double> const& grad_nent,
		      matrix<matrix<double> > & hess_log_p_tilde, //num_feat, num_feat, num_neighbor, num_action
		      matrix<vector<double> > & hess_l_tilde, //num_feat, num_feat, num_action
		      matrix<vector<double> > & hess_nent //num_feat, num_feat, num_action
)
{
    using namespace boost::lambda;
    int nf = fg.size1()+1; //+1 for lambda
    int nnb = sg(ig).size();

    hess_log_p_tilde = matrix<matrix<double> >(nf, nf);
    hess_l_tilde = matrix<vector<double> >(nf, nf);
    hess_nent = matrix<vector<double> >(nf, nf);
    for(int f1=0; f1<nf; ++f1)
    {
	for(int f2=0; f2<nf; ++f2)
	{
	    hess_log_p_tilde(f1, f2) = scalar_matrix<double>(nnb, nnb, 0.0f);
	    hess_l_tilde(f1, f2) = scalar_vector<double>(nnb, 0.0f);
	    hess_nent(f1, f2) = scalar_vector<double>(nnb, 0.0f);
	}
    }

    matrix<double> pgrad_logp = element_prod(p_tilde(ig), grad_log_p_tilde(nf-1));

    for(int ff=0; ff+1<nf; ++ff)
    {
	hess_l_tilde(ff, nf-1) = prod(pgrad_logp, fg(ff, ig));
	hess_l_tilde(nf-1, ff) = prod(pgrad_logp, fg(ff, ig));
    }

    matrix<double> dist_mat(nnb, nnb);
    for(int aa=0; aa<nnb; ++aa)
    {
	int ya = ig2yx(sg(ig)(aa), 0);
	int xa = ig2yx(sg(ig)(aa), 1);
	for(int jj=0; jj<nnb; ++jj)
	{
	    int yj = ig2yx(sg(ig)(jj), 0);
	    int xj = ig2yx(sg(ig)(jj), 1);
	    dist_mat(aa, jj) = (ya-yj)*(ya-yj) + (xa-xj)*(xa-xj);
	}
    }

    vector<double> hlptilde_one(nnb);
    for(int aa=0; aa<nnb; ++aa)
    {
	hlptilde_one(aa) = inner_prod(row(pgrad_logp, aa), row(dist_mat, aa));
    }
    for(int jj=0; jj<nnb; ++jj)
    {
	column(hess_log_p_tilde(nf-1, nf-1), jj) = hlptilde_one;
    }


    matrix<double> pgrad_logp_sq = element_prod(pgrad_logp, grad_log_p_tilde(nf-1));
    matrix<double> phess_logp = element_prod(p_tilde(ig), hess_log_p_tilde(nf-1, nf-1));

    vector<double> di=scalar_vector<double>(nnb, 0.0f);
    for(int ff=0; ff+1<nf; ++ff)
    {
	for(int nn=0; nn<nnb; ++nn)
	{
	    di(nn) += wei(ff)*fg(ff, ig)(nn);
	}
    }

    hess_l_tilde(nf-1, nf-1) = prod(phess_logp+pgrad_logp_sq, di);

    matrix<double> log_p_tilde_plus1;
    array2d_transform(log_p_tilde(ig), log_p_tilde_plus1, _1+1);
    //std::for_each(log_p_tilde_plus1.begin(), log_p_tilde_plus1.end(), _1+=1);

    vector<double> rs;
    row_sum(element_prod(phess_logp+pgrad_logp_sq, log_p_tilde_plus1)+pgrad_logp_sq, rs);
    hess_nent(nf-1, nf-1) =  rs;

    //std::cout<<"hess_log_p_tilde-trans="<<hess_log_p_tilde-trans(hess_log_p_tilde)<<std::endl;
    //std::cout<<"hess_l_tilde-trans="<<hess_l_tilde-trans(hess_l_tilde)<<std::endl;
    //std::cout<<"hess_nent-trans="<<hess_nent-trans(hess_nent)<<std::endl;
}

void compute_hess_q_pps(matrix<double> const& p_tilde, 
			vector<matrix<double> > const& grad_log_p_tilde,
			vector<double> const& log_pps,
			matrix<double> const& grad_l_tilde,
			matrix<double> const& grad_nent,
			matrix<matrix<double> > const& hess_log_p_tilde, //num_feat, num_feat, num_neighbor, num_action
			matrix<vector<double> > const& hess_l_tilde,
			matrix<vector<double> > const& hess_nent, //num_feat, num_feat, num_action
			vector<double> const& grad_q,
			matrix<double> const& grad_log_pps,
			matrix<double>& hess_q, //num_feat, num_feat
			matrix<vector<double> >& hess_log_pps //num_feat, num_feat, num_action
    )
{
    using namespace boost::lambda;
    int nf = grad_log_p_tilde.size();
    int nnb = grad_l_tilde.size2();
    hess_log_pps = matrix<vector<double> >(nf, nf);
    hess_q = matrix<double>(nf, nf);

    matrix<double> B = p_tilde;
    permutation_matrix<std::size_t> P(nnb);
    int res = lu_factorize(B, P);  //B holds L and U

    vector<double> pps(log_pps.size());
    double (*fexp)(double) = std::exp;
    std::transform(log_pps.begin(), log_pps.end(), pps.begin(), fexp);
    for(int ee=0; ee<nf; ++ee)
    {
	for(int ff=0; ff<nf; ++ff)
	{	
	    //matrix<double> pglogp= element_prod(p_tilde, grad_log_p_tilde(ff));
	    matrix<double> gradl_lp_times_gradk_lp = element_prod(grad_log_p_tilde(ee), grad_log_p_tilde(ff));
	    matrix<double> hess_pt = element_prod(p_tilde, gradl_lp_times_gradk_lp+hess_log_p_tilde(ee, ff));
	    vector<double> nvec;
	    row_sum(hess_pt, nvec);
	    matrix<double> gradl_p = element_prod(p_tilde, grad_log_p_tilde(ee));
	    matrix<double> gradk_p = element_prod(p_tilde, grad_log_p_tilde(ff));
	    nvec += prod(gradl_p, row(grad_log_pps, ff) )
		+ prod(gradk_p, row(grad_log_pps, ee) )
		+ hess_l_tilde(ee, ff)-hess_nent(ee, ff);   
	    //std::cout<<"nvec="<<std::endl;
	    //array1d_print(std::cout, nvec);
	    lu_substitute(B, P, nvec);       //nvec holds the solution B_{-1}*nvec
	    vector<double> m_bar = -nvec;

	    double sx = inner_prod(pps, element_prod(row(grad_log_pps, ee), row(grad_log_pps, ff)));

	    hess_q(ee, ff) = inner_prod(pps, nvec) + sx;

	    std::for_each(m_bar.begin(), m_bar.end(), _1 += hess_q(ee, ff));
	    hess_log_pps(ee, ff) = m_bar;
	}
    }

    //std::cout<<"hess_q-hess_qT="<<hess_q-trans(hess_q)<<std::endl;
    //std::cout<<"hess_log_pps-hess_log_ppsT="<<hess_log_pps-trans(hess_log_pps)<<std::endl;
    //std::cout<<"hess_q="<<hess_q<<std::endl;
    //std::cout<<"hess_log_pps="<<hess_log_pps<<std::endl;

}


void compute_grad_hessian(matrix<vector<double> >const& fg,
			  vector<double> const& wei,
			  vector<vector<int> >const& path_ig,
			  vector<vector<int> > const& sg,
			  vector<matrix<double> > const& p_tilde,
			  vector<matrix<double> > const& log_p_tilde,
			  vector<vector<double> >& log_pps,
			  vector<double>& q,
			  matrix<int> const& ig2yx,
			  vector<double>& grad_L,
			  matrix<double>& hess_L)
{
    int nf = fg.size1()+1; //1 for lambda position
    double alpha = -1;
    //grad_L = scalar_vector<double>(nf, 0.0f);
    //hess_L = scalar_matrix<double>(nf, nf, 0.0f);

    //regularization
    grad_L = alpha*wei;
    hess_L = alpha*identity_matrix<double>(nf);
    for(int cc=0; cc<path_ig.size(); ++cc)
    {
	for(int tt=0; tt+1<path_ig(cc).size(); ++tt)
	{
	    int ig = path_ig(cc)(tt);
	    int ig2 = path_ig(cc)(tt+1);
	    vector<matrix<double> > grad_log_p_tilde; //num_feat, num_neighbor, num_action
	    matrix<double> grad_l_tilde, grad_nent; //num_feat, num_action

	    compute_grad_plh(fg, wei, sg, p_tilde, log_p_tilde, ig2yx, ig, grad_log_p_tilde, grad_l_tilde, grad_nent);
	    vector<double> grad_q; //num_feat
	    matrix<double> grad_log_pps; //num_feat, num_action
	    compute_grad_q_pps(p_tilde(ig), grad_log_p_tilde, log_pps(ig), grad_l_tilde, grad_nent,
			       grad_q, grad_log_pps);
	    int nn = std::find(sg(ig).begin(), sg(ig).end(), ig2)-sg(ig).begin();
	    //std::cout<<"nn="<<nn<<std::endl;
	    grad_L += column(grad_log_pps, nn) - grad_q;

	    matrix<matrix<double> > hess_log_p_tilde; //num_feat, num_feat, num_neighbor, num_action
	    matrix<vector<double> > hess_l_tilde, hess_nent; //num_feat, num_feat, num_action
	    compute_hess_plh(fg, wei, sg, p_tilde, log_p_tilde, ig2yx, ig,
			     grad_log_p_tilde, grad_l_tilde, grad_nent,
			     hess_log_p_tilde, hess_l_tilde, hess_nent);

	    matrix<double> hess_q; //num_feat, num_feat
	    matrix<vector<double> > hess_log_pps; //num_feat, num_feat, num_action

	    compute_hess_q_pps(p_tilde(ig), grad_log_p_tilde, log_pps(ig), grad_l_tilde, grad_nent,
			       hess_log_p_tilde, hess_l_tilde, hess_nent,
			       grad_q, grad_log_pps, hess_q, hess_log_pps);

	    matrix<double> hess_lpps_one(hess_log_pps.size1(), hess_log_pps.size2());
	    for(int ee=0; ee<hess_lpps_one.size1(); ++ee)
	    {
		for(int ff=0; ff<hess_lpps_one.size2(); ++ff)
		{
		    hess_lpps_one(ee, ff) = hess_log_pps(ee, ff)(nn);
		}
	    }
	    //std::cout<<"hess_lpps_one="<<std::endl;
	    //array2d_print(std::cout, hess_lpps_one);
	    //std::cout<<"hess_q="<<std::endl;
	    //array2d_print(std::cout, hess_q);
	    hess_L += hess_lpps_one - hess_q;
	}
    }

}

template <class Mat, class Vec>
double eigs(Mat const& A, Vec& vec)
{
    int dim = A.size1();
    vec = Vec(dim);
    std::fill(vec.begin(), vec.end(), std::sqrt(1.0f/dim));
    for(int it=0; it<100; ++it)
    {
	vec = prod(A, vec);
	vec /= norm(vec);
    }
    return norm(prod(A, vec));
}

void solve_lmdp(matrix<vector<double> >const& fg,
		matrix<vector<double> >const& sg,
		matrix<int> const& ig2yx,
		vector<double> const& wei,
		vector<vector<double> > const& log_pps,
		vector<double>& q,
		vector<double> logz)
{
    int ng = ig2yx.size1();

}


void learn_weights(vector<matrix<float> > const& feat,
		   matrix<vector<double> >const& fg,
		   vector<vector<int> > const& sg,
		   vector<vector<double> >& log_pps,
		   vector<double>& q,
		   matrix<int> const& yx2ig,
		   matrix<int> const& ig2yx,
		   vector<vector<int> > const& path_ig,
		   vector<double>& wei)
{
    vector<matrix<double> > p_tilde;
    vector<matrix<double> > log_p_tilde;
    vector<vector<double> > l_tilde;
    vector<vector<double> > nent;


    for(int it=0; it<40; ++it)
    {
	std::cout<<"it="<<it<<"-----------------------------"<<std::endl;
	embed_lmdp(feat, fg, sg, yx2ig, ig2yx, wei,
		   p_tilde, log_p_tilde, l_tilde, nent, log_pps, q);

	vector<double> logz;
	solve_lmdp(fg, sg, ig2yx, wei, log_pps, q);

	vector<double> grad_L;
	matrix<double> hess_L;
	compute_grad_hessian(fg, wei, path_ig, sg, p_tilde, log_p_tilde, log_pps, q, ig2yx,
			     grad_L, hess_L);

#if 0
	std::cout<<"grad_L="<<std::endl;
	array1d_print(std::cout, grad_L);
	std::cout<<"hess_L="<<std::endl;
	array2d_print(std::cout, hess_L);
#endif

	permutation_matrix<std::size_t> P(hess_L.size1());

	int res = lu_factorize(hess_L, P);  //hess_L holds L and U
	lu_substitute(hess_L, P, grad_L);       //grad_L holds the solution hess_L_{-1}*grad_L

	//std::cout<<"grad_L1="<<std::endl;
	//std::cout<<-grad_L1<<std::endl;

	wei += -grad_L;
	std::cout<<"wei="<<std::endl;
	array1d_print(std::cout, wei);

#if 0
	//compute_pps(feat, fg, yx2ig, ig2yx, wei, pps);

	vector<double> grad_L1;
	compute_grad_L1(fg, pps, path_ig, grad_L1);

	std::cout<<"grad_L1="<<std::endl;
	array1d_print(std::cout, grad_L1);
	
	matrix<double> hess_L1;
	compute_hessian_L1(fg, pps, path_ig, hess_L1);

	std::cout<<"hess_L1="<<std::endl;
	array2d_print(std::cout, hess_L1);

	permutation_matrix<std::size_t> P(hess_L1.size1());

	int res = lu_factorize(hess_L1, P);  //vv holds L and U
	lu_substitute(hess_L1, P, grad_L1);       //vd holds the solution var_{-1}*data

	//std::cout<<"grad_L1="<<std::endl;
	//std::cout<<-grad_L1<<std::endl;

	wei += -grad_L1;
	std::cout<<"wei="<<std::endl;
	array1d_print(std::cout, wei);
#endif

    }

}



int main(int argc, char* argv[])
{
    using namespace boost::lambda;
    directory_structure_t ds;
    ds.make_dir();
    //array<int, 2> goal;
    training_data_t tdata;

    tdata.load(ds.prefix+"training_data2.xml");
    matrix<int>& obs = tdata.obs;
    matrix<int>& dyn_obs = tdata.dyn_obs;
    matrix<int>& path = tdata.path;

    CImg<unsigned char> vis_map;
    draw_training_data(vis_map, tdata);
    {
	std::string name = ds.figures+"vis_map.png";
	vis_map.save_png(name.c_str());
    }

    vector<matrix<float> > feat;
    generate_feature_maps(obs, dyn_obs, feat);

    for(int ii=0; ii<feat.size(); ++ii)
    {
	CImg<unsigned char> vis_feat;
	double maxf = *(std::max_element(feat(ii).data().begin(), feat(ii).data().end()));
	array2d_transform(feat(ii), vis_feat, ll_static_cast<unsigned char>(_1*254/maxf));
	std::string name = ds.figures+str(format("vis_feat%03d.png")%ii);
	vis_feat.save_png(name.c_str());
    }

    vector<vector<int> > sg; //(num_states, num_neighbors)
    matrix<vector<double> > fg; //(num_features, num_states, num_neighbors)
    vector<vector<double> > log_pps; //(num_states, num_neighbors)
    matrix<int> yx2ig;
    matrix<int> ig2yx;

    get_state_graph(obs, dyn_obs, sg, yx2ig, ig2yx);
    std::cout<<sg<<std::endl;

    get_feature_graph(obs, dyn_obs, feat, sg, ig2yx, fg);

    //array2d_print(std::cout, pps);

    vector<vector<int> > path_ig(1);
    get_path_ig(path, yx2ig, path_ig(0));

    vector<double> wei(feat.size()+1);
    wei <<= 0.33, 0.33, 0.33, 1;

    vector<double> q;
    learn_weights(feat, fg, sg, log_pps, q, yx2ig, ig2yx, path_ig, wei);

    return 0;
}
