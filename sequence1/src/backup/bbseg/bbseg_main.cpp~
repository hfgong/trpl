#include <boost/mpi/environment.hpp>
#include <boost/mpi/communicator.hpp>
#include <boost/filesystem.hpp>

#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/matrix_proxy.hpp>
#include <boost/numeric/ublas/io.hpp>

#include <boost/format.hpp>

#include <boost/lambda/lambda.hpp>
#include <boost/lambda/casts.hpp>

#include <iostream>
#include <fstream>

#include <CImg.h>

#include "real_timer.hpp"
#include "text_file.hpp"
#include "ublas_cimg.hpp"
#include "bbseg.hpp"


using namespace cimg_library;

namespace mpi = boost::mpi;
namespace fs = boost::filesystem;
using namespace boost::numeric::ublas;


using namespace cvpr;

//const float head_w=0.5;
//const float head_h=0.2;
//const float torso_h = 0.6;
const float model_data[3][4]=
{
    {0.25, 0, 0.75, 0.2},
    {0, 0.2, 1, 0.6},
    {0, 0.6, 1, 1}
};

void load_part_model(vector<boost::array<float, 4> >& model)
{

    model = vector<boost::array<float, 4> >(3);
    for(int ii=0; ii<3; ++ii)
    {
	for(int jj=0; jj<4; ++jj)
	{
	    model(ii)[jj] = model_data[ii][jj];
	}
    }

}


std::string rank_and_time(int rank)
{
    int h, m, s, ms;
    time_of_day(h, m, s, ms);
    return boost::str(boost::format("#%d-%02d:%02d:%02d.%03d")
		      %rank%h%m%s%ms )+":";
}

void load_shape(const std::string& shape_name, CImg<float>& shape)
{
    CImg<unsigned char> shape_img = CImg<unsigned char>(shape_name.c_str());
    shape = CImg<float>(shape_img.width(), shape_img.height(), 1, 1);
    for(int yy=0; yy<shape.height(); ++yy)
    {
	for(int xx=0; xx<shape.width(); ++xx)
	{
	    shape(xx, yy, 0, 0) = 0;
	    for(int cc=0; cc<shape.spectrum(); ++cc)
	    {
		shape(xx, yy, 0, 0) += shape_img(xx, yy, 0, cc);
	    }
	    shape(xx, yy, 0, 0) /= shape_img.spectrum();
	}
    }

}

void draw_detected_boxes(CImg<unsigned char>* images, int cam,
			 const matrix<float>& car_boxes,
			 const matrix<float>& ped_boxes )
{
    using namespace boost::numeric::ublas;
    using namespace boost::lambda;

    CImg<unsigned char>& image = images[cam];

    for(int cc=0; cc<car_boxes.size1(); ++cc)
    {
	if(car_boxes(cc, 4)<=0) continue;
	unsigned char ccol[3]={255, 255, 0};
	boost::array<int, 4> box;
	vector<float> b = project(row(car_boxes, cc), range(0, 4));
	std::transform(b.begin(), b.end(), box.begin(), ll_static_cast<int>(_1+0.5f));

	image.draw_line(box[0], box[1], 0, box[0], box[3], 0, ccol, 1);
	image.draw_line(box[2], box[1], 0, box[2], box[3], 0, ccol, 1);
	image.draw_line(box[0], box[1], 0, box[2], box[1], 0, ccol, 1);
	image.draw_line(box[0], box[3], 0, box[2], box[3], 0, ccol, 1);

    }

    for(int pp=0; pp<ped_boxes.size1(); ++pp)
    {
	unsigned char pcol[3]={255, 0, 0};
	boost::array<int, 4> box;
	vector<float> b = row(ped_boxes, pp);
	std::transform(b.begin(), b.end(), box.begin(), ll_static_cast<int>(_1+0.5f));

	image.draw_line(box[0], box[1], 0, box[0], box[3], 0, pcol, 1);
	image.draw_line(box[2], box[1], 0, box[2], box[3], 0, pcol, 1);
	image.draw_line(box[0], box[1], 0, box[2], box[1], 0, pcol, 1);
	image.draw_line(box[0], box[3], 0, box[2], box[3], 0, pcol, 1);
    }

}

void read_sequence_list(const std::string& prefix, boost::array<std::vector<std::string>, 2>& seq)
{
    std::vector<std::string> seql;
    std::vector<std::string> seqr;

    read_string_list(prefix+"image_list_l.txt", seql);
    read_string_list(prefix+"image_list_r.txt", seqr);

    for(int jj=0; jj<seql.size(); ++jj)
    {
	seql[jj] = prefix+"left_rect/"+seql[jj];
    }

    for(int jj=0; jj<seqr.size(); ++jj)
    {
	seqr[jj] = prefix+"right_rect/"+seqr[jj];
    }

    seq[0] = seql;
    seq[1] = seqr;

}

template <class T>
void draw_detection_segments(CImg<T>& image, const matrix<matrix<int> >& segs,
			     const matrix<boost::array<int, 4> >& parts,
			     const matrix<boost::array<int, 4> >& exts)
{
    using namespace boost;
    for(int ss=0; ss<segs.size1(); ++ss)
    {
	T color[3][3]={ {0, 0, 255}, {0, 255, 0}, {255, 0, 0}};
	for(int bb=0; bb<segs.size2(); ++bb)
	{
	    const array<int, 4>& ext = exts(ss, bb);
	    image.draw_line(ext[0], ext[1], 0, ext[0], ext[3], 0, color[bb], 1);
	    image.draw_line(ext[2], ext[1], 0, ext[2], ext[3], 0, color[bb], 1);
	    image.draw_line(ext[0], ext[1], 0, ext[2], ext[1], 0, color[bb], 1);
	    image.draw_line(ext[0], ext[3], 0, ext[2], ext[3], 0, color[bb], 1);

	    const array<int, 4>& par = parts(ss, bb);
	    image.draw_line(par[0], par[1], 0, par[0], par[3], 0, color[bb], 2);
	    image.draw_line(par[2], par[1], 0, par[2], par[3], 0, color[bb], 2);
	    image.draw_line(par[0], par[1], 0, par[2], par[1], 0, color[bb], 2);
	    image.draw_line(par[0], par[3], 0, par[2], par[3], 0, color[bb], 2);

	    for(int dy=0; dy<segs(ss, bb).size1(); ++dy)
	    {
		for(int dx=0; dx<segs(ss, bb).size2(); ++dx)
		{
		    if(segs(ss, bb)(dy, dx))
		    {
			image.draw_point(ext[0]+dx, ext[1]+dy, color[bb], 0.5);
		    }
		}
	    }
	}
    }
}

//#define HALF_IMAGE
int main(int argc, char* argv[]) 
{
    using namespace boost::numeric::ublas;
    using boost::array;
    mpi::environment env(argc, argv);
    mpi::communicator world;
    std::cout << "I am process " << world.rank() << " of " << world.size()
	      << "." << std::endl;

    const std::string prefix = "../images/";
    const std::string output = "../output2/";
    const std::string workspace = "../workspace/";
    const std::string figures = "../figures/";

    if (0==world.rank())
    {
	if ( !fs::exists( output ) )
	{
	    fs::create_directory( output );
	}
    
	if ( !fs::exists( figures ) )
	{
	    fs::create_directory( figures );
	}
    }
    world.barrier();

    real_timer_t timer;
    boost::array<std::vector<std::string>, 2> seq;
    read_sequence_list(prefix, seq);
    int T = seq[0].size();
    int Ncam = 2;

    std::string shape_name = prefix+"shape.bmp";
    CImg<float> shape;
    load_shape(shape_name, shape);

#ifdef HALF_IMAGE
    shape.resize_halfXY();
#endif

    vector<boost::array<float, 4> > model;
    load_part_model(model);


    for(int tt=world.rank(); tt<T; tt+=world.size())
    {
	CImg<unsigned char> images[Ncam];
	matrix<float> mat[Ncam];
	real_timer_t frame_timer;

	for(int cam=0; cam<Ncam; ++cam)
	{
	    images[cam] = CImg<unsigned char>(seq[cam][tt].c_str());
#ifdef HALF_IMAGE
	    images[cam].resize_halfXY();
#endif
	    mat[cam] = ublas_matrix<float>(images[cam]);
	}

	for(int cam=0; cam<Ncam; ++cam)
	{
	    fs::path seq_path = seq[cam][tt];

	    std::string image_name = fs::basename(seq_path);
	    fs::path image_folder = seq_path.branch_path();

	    fs::path car_path = image_folder/"car_detection"/(image_name+".txt");
	    fs::path ped_path = fs::path(workspace)/(image_name+"_3d_ped.txt");

	    matrix<float> car_boxes;
	    read_text_matrix(car_path.string(), car_boxes);
#ifdef HALF_IMAGE
	    car_boxes /= 2.0f;
#endif
      
	    matrix<float> ped_boxes;
	    read_text_matrix(ped_path.string(), ped_boxes);
#ifdef HALF_IMAGE
	    ped_boxes /= 2.0f;
#endif
	    //draw boxes
	    draw_detected_boxes(images, cam, car_boxes, ped_boxes);
	    matrix<matrix<int> > segs;
	    matrix<array<int, 4> > exts;
	    matrix<array<int, 4> > parts;

	    int nc = images[cam].spectrum();
	    bbseg::bbsegment_image(mat[cam], nc, model, ped_boxes, segs, parts, exts);
	    draw_detection_segments(images[cam], segs, parts, exts);

#ifdef HALF_IMAGE
	    fs::path det_path = fs::path(figures)/(image_name+"_det_half.jpg");
#else
	    fs::path det_path = fs::path(figures)/(image_name+"_det.jpg");
#endif
	    images[cam].save_jpeg(det_path.string().c_str(), 90);

	}
	std::cout<<"rank="<<world.rank()<<", frame="<<tt
		 <<" done in "<<frame_timer.elapsed()/1000.0f<<"s."<<std::endl;

    }

    std::cout<<"rank="<<world.rank()<<", \t "<<timer.elapsed()/1000.0f<<"s."<<std::endl;
    return 0;
}
