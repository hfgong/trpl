#include "tracking_data_package.hpp"
#include "tracking_detail.hpp"

#include "linprog_app.hpp"

#include "finalize_trajectory.hpp"

float app_match_thr = -2;

int main(int argc, char* argv[])
{
    directory_structure_t ds;

    int nn=0;
    while(nn<20000)
    {
	std::string name = ds.workspace+boost::str(boost::format("trlet_%04d.xml")%nn);
	if(!fs::exists(name)) break;
	++nn;
    }

    int num_obj = nn;
    vector<object_trj_t> trlet_list(num_obj);

    for(int nn=0; nn<trlet_list.size(); ++nn)
    {
	std::string name = ds.workspace+boost::str(boost::format("trlet_%04d.xml")%nn);
	trlet_list(nn).load(name.c_str());
	std::cout<<"---"<<name<<"---";
	std::cout<<"len="<<trlet_list(nn).endt-trlet_list(nn).startt+1<<std::endl;
    }

    matrix<int> Tff;
    vector<int> good_trlet_index;

    {
	std::string name = ds.workspace+"good_trlet_index.txt";
	std::ifstream fin(name.c_str());
	fin>>good_trlet_index;
	fin.close();
    }
    //std::cout<<good_trlet_index<<std::endl;

    //matrix<int> Tff;
    //prepare_valid_linkset(good_trlet_index, trlet_list, t_thresh, v_thresh, Tff);

    {
	std::string name = ds.workspace+"Tff.txt";
	std::ifstream fin(name.c_str());
	fin>>Tff;
	fin.close();
    }
    //std::cout<<Tff<<std::endl;

    matrix<float> Aff;
    prepare_app_affinity(Tff, good_trlet_index, trlet_list, app_match_thr, Aff);

    {
	std::string name = ds.workspace+"Aff.txt";
	std::ofstream fout(name.c_str());
	fout<<Aff;
	fout.close();
    }


//////////////////////////////////////////////////////////////////////////
    vector<std::vector<std::string> > seq(2);
    read_sequence_list(ds.prefix, seq);
    int T = seq[0].size();
    int Ncam = 2;

    array<std::size_t, 2> img_size = {768, 1024};
    geometric_info_t gi;
    gi.load(ds, img_size);

    parameter_t P;

    //matrix<pmodel_t> pmodel_list;
    vector<array<float, 4> > model;

    load_part_model(model, P.head_wid_ratio, P.head_hi_ratio, P.torso_hi_ratio);

    matrix<float> Ocff;
    matrix<object_trj_t> gap_trlet_list;

    real_timer_t timer;
    prepare_occl_affinity(seq, gi, P, trlet_list, model,
			  good_trlet_index, Tff, Ocff, gap_trlet_list);


    {
	std::string name = ds.workspace+"Ocff.txt";
	std::ofstream fout(name.c_str());
	fout<<Ocff;
	fout.close();
    }
    std::cout<<"prepare occl affinity time: "<<timer.elapsed()/1000.0f<<std::endl;

#if 0
    real_timer_t timer2;

    matrix<int> LMat;
    matrix<int> links;

    matrix<float> Aff2(Aff+Ocff*0.2);
    solve_linprog(Tff, Aff2, LMat, links);

    std::cout<<"LP time: "<<timer2.elapsed()/1000.0f<<std::endl;
    return 0;
}

int main(int argc, char* argv[])
{
    directory_structure_t ds;

    matrix<int> Tff;
    {
	std::string name = ds.workspace+"Tff.txt";
	std::ifstream fin(name.c_str());
	fin>>Tff;
	fin.close();
    }
    //std::cout<<Tff<<std::endl;

    matrix<float> Aff;
    {
	std::string name = ds.workspace+"Aff.txt";
	std::ifstream fin(name.c_str());
	fin>>Aff;
	fin.close();
    }

    matrix<float> Ocff;
    {
	std::string name = ds.workspace+"Ocff.txt";
	std::ifstream fin(name.c_str());
	fin>>Ocff;
	fin.close();
    }

#endif
    real_timer_t timer2;

    matrix<int> LMat;
    matrix<int> links;

    matrix<float> Aff2(Aff+Ocff*0.2);
    solve_linprog(Tff, Aff2, LMat, links);

    std::cout<<"LP time: "<<timer2.elapsed()/1000.0f<<std::endl;

    std::cout<<"Lv="<<links<<std::endl;

    vector<object_trj_t> final_trj_list;
    vector<std::vector<int> > final_trj_index;
    matrix<int> final_state_list;

    finalize_trajectory(Ncam, T, good_trlet_index,
			links, trlet_list, gap_trlet_list,
			final_trj_list, final_trj_index, final_state_list);


    return 0;

}

#include "linprog_app_impl.hpp"
#include "finalize_trajectory_impl.hpp"
